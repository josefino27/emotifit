version: "3.1"
services:
    www-nginx:
        build: . #se setea el directorio donde buscar el DockerFile
        container_name: ${DOCKER_APP_NAME}_${DOCKER_ENVIRONMENT}_web_nginx #nombre del contenedor basado en el nombre de la app y en entorno
        ports: 
            - "${DOCKER_PORT_EXPOSE}:80"
        volumes:
            - ./:/var/www/html/ #monta la carpeta del proyecto dentro del contenedor en /var/www/html/
            - ./docker/docker_nginx/sites-enabled/:/etc/nginx/conf.d/ # dejar las configuraciones de nginx dentro del contenedor
            - ~/.ssh:/root/.ssh/ # monta nuestras claves ssh dentro del contenedor par apoder realizar conexiones remotas desde dentro del contenedor.
            - ./docker/docker_nginx/certs/:/certs/
        links:
            - db:database # link para tener el hostname database para conectarnos a la base de datos
            - php:php_fpm # link para tener el hostname php_fpm para conectarnos al php-fpm
        networks:
            - appnet # nombre interno de la red para los servicios
        image: ${DOCKER_IMAGE_BASE}/${DOCKER_IMAGE_NAME}_web:${DOCKER_IMAGE_VERSION} # nombre de la imagen generado usando variables de entorno
        profiles: ["${DOCKER_NGINX_PROFILE}"]
    www-nginx-secure:
        build: . #se setea el directorio donde buscar el DockerFile
        container_name: ${DOCKER_APP_NAME}_${DOCKER_ENVIRONMENT}_web_secure_nginx #nombre del contenedor basado en el nombre de la app y en entorno
        ports: 
            - "${DOCKER_PORT_EXPOSE}:80"
            - "${DOCKER_PORT_EXPOSE_SECURE}:443" # Exponer el contenedor basado en el puerto desde la variable de entorno
        volumes:
            - ./:/var/www/html/ #monta la carpeta del proyecto dentro del contenedor en /var/www/html/
            - ./docker/docker_nginx/sites-enabled/:/etc/nginx/conf.d/ # dejar las configuraciones de nginx dentro del contenedor
            - ~/.ssh:/root/.ssh/ # monta nuestras claves ssh dentro del contenedor par apoder realizar conexiones remotas desde dentro del contenedor.
            - ./docker/docker_nginx/certs/:/certs/
        links:
            - db:database # link para tener el hostname database para conectarnos a la base de datos
            - php:php_fpm # link para tener el hostname php_fpm para conectarnos al php-fpm
        networks:
            - appnet # nombre interno de la red para los servicios
        image: ${DOCKER_IMAGE_BASE}/${DOCKER_IMAGE_NAME}_web:${DOCKER_IMAGE_VERSION} # nombre de la imagen generado usando variables de entorno
        profiles: ["${DOCKER_NGINX_SECURE_PROFILE}"]
    www-apache:
        build: 
            context: ./ #contexto de en que carpeta estaremos trabajando para generar la imagen
            dockerfile: Dockerfile.apache #dockerfile utilizado para crear la imagen
            args:
                - DOCKER_GITLAB_TOKEN=${DOCKER_GITLAB_TOKEN} 
        container_name: ${DOCKER_APP_NAME}_${DOCKER_ENVIRONMENT}_web_apache #nombre del contenedor basado en el nombre de la app y en entorno
        ports: 
            - "${DOCKER_PORT_EXPOSE}:80"
        volumes:
            - ./:/var/www/html/ #monta la carpeta del proyecto dentro del contenedor en /var/www/html/
            - ./docker/docker_apache/conf/default_apache.conf:/usr/local/apache2/conf/httpd.conf
            - ./docker/docker_apache/conf/httpd-vhosts.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf # dejar las configuraciones de nginx dentro del contenedor
            - ~/.ssh:/root/.ssh/ # monta nuestras claves ssh dentro del contenedor par apoder realizar conexiones remotas desde dentro del contenedor.
            - ./docker/certs/:/certs/
        links:
            - db:database # link para tener el hostname database para conectarnos a la base de datos
            - php:php_fpm # link para tener el hostname php_fpm para conectarnos al php-fpm
        networks:
            - appnet # nombre interno de la red para los servicios
        image: ${DOCKER_IMAGE_BASE}/${DOCKER_IMAGE_NAME}_web_apache:${DOCKER_IMAGE_VERSION} # nombre de la imagen generado usando variables de entorno
  
        profiles: ["${DOCKER_APACHE_PROFILE}"]
    www-apache-secure:
        build: 
            context: ./ #contexto de en que carpeta estaremos trabajando para generar la imagen
            dockerfile: Dockerfile.apache #dockerfile utilizado para crear la imagen
            args:
                - DOCKER_GITLAB_TOKEN=${DOCKER_GITLAB_TOKEN} 
        container_name: ${DOCKER_APP_NAME}_${DOCKER_ENVIRONMENT}_web_apache #nombre del contenedor basado en el nombre de la app y en entorno
        ports: 
            - "${DOCKER_PORT_EXPOSE}:80"
            - "${DOCKER_PORT_EXPOSE_SECURE}:443"
        volumes:
            - ./:/var/www/html/ #monta la carpeta del proyecto dentro del contenedor en /var/www/html/
            - ./docker/docker_apache/conf/default_apache.conf:/usr/local/apache2/conf/httpd.conf
            - ./docker/docker_apache/conf/httpd-vhosts.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf # dejar las configuraciones de nginx dentro del contenedor
            - ~/.ssh:/root/.ssh/ # monta nuestras claves ssh dentro del contenedor par apoder realizar conexiones remotas desde dentro del contenedor.
            - ./docker/certs/:/certs/
        links:
            - db:database # link para tener el hostname database para conectarnos a la base de datos
            - php:php_fpm # link para tener el hostname php_fpm para conectarnos al php-fpm
        networks:
            - appnet # nombre interno de la red para los servicios
        image: ${DOCKER_IMAGE_BASE}/${DOCKER_IMAGE_NAME}_web_apache:${DOCKER_IMAGE_VERSION} # nombre de la imagen generado usando variables de entorno
  
        profiles: ["${DOCKER_APACHE_SECURE_PROFILE}"]
    php:
        build: 
            context: ./ #contexto de en que carpeta estaremos trabajando para generar la imagen
            dockerfile: docker/php/Dockerfile #dockerfile utilizado para crear la imagen
            args:
                - DOCKER_GITLAB_TOKEN=${DOCKER_GITLAB_TOKEN} #al build de la imagen le pasaremos un token de gitlab para poder obtener modules o dependencias desde repositorios privados de ilogica
        container_name: ${DOCKER_APP_NAME}_${DOCKER_ENVIRONMENT}_php #nombre del contenedor basado en el nombre de la app y en entorno
        volumes:
            - ./:/var/www/html/ #monta la carpeta del proyecto dentro del contenedor en /var/www/html/
            - ~/.ssh:/root/.ssh/  # monta nuestras claves ssh dentro del contenedor par apoder realizar conexiones remotas desde dentro del contenedor.
        links:
            - db:database # link para tener el hostname database para conectarnos a la base de datos
        networks:
            - appnet # nombre interno de la red para los servicios
        image: ${DOCKER_IMAGE_BASE}/${DOCKER_IMAGE_NAME}_php:${DOCKER_IMAGE_VERSION} # nombre de la imagen generado usando variables de entorno
        profiles: ["${DOCKER_PHP_PROFILE}"]
    db:
        image: mariadb:10.5.8
        container_name: ${DOCKER_APP_NAME}_${DOCKER_ENVIRONMENT}_db #nombre del contenedor basado en el nombre de la app y en entorno
        environment:
            - MYSQL_ROOT_PASSWORD=root
        volumes:
            - ./docker/docker_dump:/data #mondaje de ./docker/docker_dump dentro del contenedor en la carpeta /data
            - ./docker/docker_mysql/conf:/etc/mysql/conf.d #mondaje de ./docker/docker_mysql/conf dentro del contenedor en la carpeta /etc/mysql/conf.d
            - ./docker/docker_mysql/data:/var/lib/mysql #montaje de ./docker/docker_mysql/data dentro del contenedor en la carpeta /var/lib/mysql para tener data redundante
            - ./docker/docker_dump:/docker-entrypoint-initdb.d # montaje de ./docker/docker_dump en el entry point de la imagen para ejecutar el sql, en caso de existir
        networks:
            - appnet # nombre interno de la red para los servicios
        profiles: ["${DOCKER_DB_PROFILE}"]
    phpmyadmin:
        container_name: ${DOCKER_APP_NAME}_${DOCKER_ENVIRONMENT}_phpmyadmin #nombre del contenedor basado en el nombre de la app y en entorno
        image: phpmyadmin/phpmyadmin
        links:
            - db:db
        ports:
            - ${DOCKER_PORT_EXPOSE_PHPMYADMIN}:80 #Puerto p√∫blico de phpmyadmin desde variable de entorno
        environment:
            MYSQL_ROOT_PASSWORD: root%
        networks:
            - appnet # nombre interno de la red para los servicios
        profiles: ["${DOCKER_PHPMYADMIN_PROFILE}"]
networks:
  appnet:
    name: ${DOCKER_NETWORK_NAME}_${DOCKER_ENVIRONMENT} # nombre publico de la red para los cotenedores
